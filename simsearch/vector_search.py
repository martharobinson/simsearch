import numpy as np
import pandas as pd
import hnswlib


def load_embeddings(csv_path: str) -> tuple[np.ndarray, list[str]]:
    """Load CLIP embeddings from a CSV file generated by embed_with_clip."""
    df = pd.read_csv(csv_path, index_col="filename")
    embeddings = df.values.astype(np.float32)
    # Normalize embeddings to unit vectors
    norms = np.linalg.norm(embeddings, axis=1, keepdims=True)
    embeddings = embeddings / np.clip(norms, a_min=1e-8, a_max=None)
    filenames = df.index.tolist()
    return embeddings, filenames


def build_hnsw_index(
    embeddings: np.ndarray, M: int = 32, efConstruction: int = 200
) -> hnswlib.Index:
    """Build a HNSWLIB index from embeddings."""
    dim = embeddings.shape[1]
    num_elements = embeddings.shape[0]
    index = hnswlib.Index(space="cosine", dim=dim)
    index.init_index(max_elements=num_elements, ef_construction=efConstruction, M=M)
    index.add_items(embeddings)
    index.set_ef(efConstruction)
    return index


def search(
    index: hnswlib.Index, query_vector: np.ndarray, k: int = 5
) -> tuple[np.ndarray, np.ndarray]:
    """Search the HNSW index for the k nearest neighbors to the query_vector."""
    query_vector = np.asarray(query_vector, dtype=np.float32).reshape(1, -1)
    indices, distances = index.knn_query(query_vector, k=k)
    # Convert hnswlib cosine distances to cosine similarity
    similarities = 1.0 - distances[0]
    return similarities, indices[0]
